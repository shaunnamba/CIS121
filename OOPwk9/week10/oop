#build a star class taht takes a name as an argument aand has a getter,setter,and a string reprsentation of the 
#object.Then, instantiate star object.
import math
class Planet:
    def __init__(self,_name,_radius,_mass,_distance,):
        self.name=_name
        self.radius=_radius
        self.mass=_mass
        self.distance=_distance
    def get_name(self):
        return self.name
    def get_radius(self):
        return self.radius
    def get_mass(self):
        return self.mass
    def get_distance(self):
        return self.distance
    def get_volume(self):
        volume=4/3 *math.pi *self.radius**3
        return volume
    def get_density(self):
        density= self.mass/self.get_volume()
        return density
    def set_name(self,new_name):
        self.name=new_name
    def __str__(self):
        msg=''
        msg+=f'hello {self.get_name()}. How are you?'
        return msg

class Star:
    def __init__(self,name):
        self.name=name
    def get_name(self):
        return self.name
    def set_name(self,new_name):
        self.name=new_name
    def __str__(self):
        msg=""
        msg+=f"hello {self.get_name()}"
        return msg



'''create a planetary system class that takes a star as an argument, has the ability to add  planets to the system
and can print all the planets in the system.
'''
class PlanetarySystem:
    def __init__(self,_star):
        self.star=_star
        self.planets=[]

    def add_planets(self,_planet):
        self.planets.append(_planet)    
    def show_planets(self):
        for planet in self.planets:
            print(planet.get_name())

sun=Star("Sun")
ss=PlanetarySystem(sun)
p=Planet('mercury',1,2,3)
ss.add_planets(p) 

p=Planet('venus',3,4,5)
ss.add_planets(p) 
p=Planet('earth',5,6,7)
ss.add_planets(p) 

ss.show_planets() 